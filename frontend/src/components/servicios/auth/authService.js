import { postRequest, putRequest, getRequest, deleteRequest } from "./api";
import { ENDPOINTS, BASE_URL } from "../endpoints";

// üîê Iniciar Sesi√≥n
export const loginUser = async (credentials) => {
  console.log("üîê Enviando login con: ", credentials);
  console.log("‚û°Ô∏è URL:", `${BASE_URL.auth}${ENDPOINTS.auth.login}`);

  try {
    const url = `${BASE_URL.auth}${ENDPOINTS.auth.login}`;
    const response = await postRequest(url, credentials);
    console.log("‚úÖ Respuesta:", response);

    if (response?.accessToken) {
      localStorage.setItem("accessToken", response.accessToken);
      if (response.refreshToken) {
        localStorage.setItem("refreshToken", response.refreshToken);
      }
      if (response.user) {
        localStorage.setItem("user", JSON.stringify(response.user));
      }
      return response;
      
    } else {
      console.error("‚ùå Error: Respuesta inesperada del servidor.", response);
      return null;
    }
  } catch (error) {
    console.error("‚ùå Error en el login:", error.response?.data || error.message);

    if (error.response?.status === 401) {
      alert("‚ùå Credenciales incorrectas.");
    } else if (error.response?.status >= 500) {
      alert("‚ùå Error del servidor. Int√©ntalo m√°s tarde.");
    }

    return null;
  }

};

// üìù Registrar Usuario
export const registerUser = async (userData) => {
  try {
    const url = `${BASE_URL.auth}${ENDPOINTS.auth.register}`;
    const response = await postRequest(url, userData);

    if (response?.accessToken) {
      localStorage.setItem("accessToken", response.accessToken);
      if (response.refreshToken) {
        localStorage.setItem("refreshToken", response.refreshToken);
      }
      if (response.user) {
        localStorage.setItem("user", JSON.stringify(response.user));
      }
      return response;
    } else {
      console.error("‚ùå Error: Respuesta inesperada del servidor.", response);
      return null;
    }
  } catch (error) {
    console.error("‚ùå Error en el registro:", error.response?.data || error.message);

    if (error.response?.status === 409) {
      alert("‚ö†Ô∏è El correo ya est√° registrado.");
    } else if (error.response?.status >= 500) {
      alert("‚ùå Error del servidor. Int√©ntalo m√°s tarde.");
    }

    return null;
  }
};

// üö™ Cerrar sesi√≥n
export const logoutUser = () => {
  localStorage.removeItem("accessToken");
  localStorage.removeItem("refreshToken");
  localStorage.removeItem("user");
  alert("üëã Sesi√≥n cerrada exitosamente.");
};

// üë• Obtener todos los usuarios
export const getUsers = async () => {
  const url = `${BASE_URL.auth}${ENDPOINTS.dashboard.user}`;
  console.log('üì° GET users =>', url);
  return await getRequest(url);
};

// ‚ûï Crear nuevo usuario
export const createUser = async (userData) => {
  const url = `${BASE_URL.auth}${ENDPOINTS.dashboard.createUser}`;
  return await postRequest(url, userData);
};

// ‚úèÔ∏è Actualizar usuario
export const updateUser = async (id, userData) => {
  const url = `${BASE_URL.auth}${ENDPOINTS.dashboard.updateUser(id)}`;
  return await putRequest(url, userData);
};

// üóëÔ∏è Eliminar usuario
export const deleteUser = async (id) => {
  const url = `${BASE_URL.auth}${ENDPOINTS.dashboard.deleteUser(id)}`;
  return await deleteRequest(url);
};
// ‚úÖ Actualizar configuraci√≥n del usuario
export const updateUserSettings = async (settings) => {
  try {
    const url = `${BASE_URL.auth}${ENDPOINTS.auth.updateSettings}`; // aseg√∫rate de tener este endpoint
    const response = await putRequest(url, settings);

    if (response?.user) {
      localStorage.setItem("user", JSON.stringify(response.user));
      alert("‚úÖ Configuraci√≥n actualizada correctamente.");
      return response.user;
    } else {
      console.error("‚ùå No se pudo actualizar.");
      return null;
    }
  } catch (error) {
    console.error("‚ùå Error al actualizar configuraci√≥n:", error.response?.data || error.message);
    alert("‚ùå Error al actualizar la configuraci√≥n.");
    return null;
  }
};
