Los archivos para el panel son y quiero que me deas solucion en todo
Dasboard.js import React, { useState, useContext, useEffect, useRef } from "react";
import { useHistory } from "react-router-dom";
import Sidebar from "../layouts/Sidebar";
import { AuthContext } from "../../context/AuthContext";
import { FaSun, FaMoon, FaSearch, FaBars, FaUserCircle } from "react-icons/fa";
import "../../assets/css/dashboard.css";

const Dashboard = () => {
  const history = useHistory();
  const { user, logout } = useContext(AuthContext);
  const [darkMode, setDarkMode] = useState(() => localStorage.getItem("theme") === "dark");
  const [menuOpen, setMenuOpen] = useState(false);
  const menuRef = useRef(null);

  useEffect(() => {
    document.body.classList.toggle("dark-mode", darkMode);
  }, [darkMode]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (menuRef.current && !menuRef.current.contains(event.target)) {
        setMenuOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const toggleTheme = () => {
    const newTheme = darkMode ? "light" : "dark";
    setDarkMode(!darkMode);
    document.body.classList.toggle("dark-mode", !darkMode);
    localStorage.setItem("theme", newTheme);
  };

  return (
    <div className="dashboard-container">
      {/* 🔹 Barra superior */}
      <div className="topbar">
        <button className="menu-btn">
          <FaBars />
        </button>
        <div className="search-bar">
          <FaSearch className="search-icon" />
          <input type="text" placeholder="Buscar en el dashboard..." />
        </div>
        <div className="topbar-icons">
          <button className="toggle-theme-btn" onClick={toggleTheme}>
            {darkMode ? <FaSun /> : <FaMoon />}
          </button>
          <div className="profile-container" ref={menuRef}>
            <button className="profile-btn" onClick={() => setMenuOpen(!menuOpen)}>
              <FaUserCircle className="profile-icon" />
              <span>{user?.name || "Usuario"}</span>
            </button>
            {menuOpen && (
              <div className="profile-dropdown">
                <ul>
                  <li onClick={() => history.push("/dashboard/profile")}>Mi Perfil</li>
                  <li onClick={() => history.push("/dashboard/settings")}>Configuración</li>
                  <li onClick={logout}>Cerrar Sesión</li>
                </ul>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* 🔹 Sidebar y contenido principal */}
      <div className="main-content">
        <Sidebar />
        <div className="dashboard-content">
          <h2>Panel de Administración</h2>
          <p>Bienvenido, {user?.name || "Usuario"}.</p>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
y Product.js import React, { useEffect, useState } from "react";
import Sidebar from "../layouts/Sidebar";
import { getProducts, deleteProduct, createProduct, updateProduct } from "../servicios/shop/productService";
import ProductTable from "../sections/dashboard/ProductTable"; // Ahora solo es la tabla
import ProductFormModal from "../sections/dashboard/ProductFormModal"; // Importa el modal




const Products = () => {
  const [products, setProducts] = useState([]);
  const [formData, setFormData] = useState({ id: "", title: "", price: "" });
  const [isEditing, setIsEditing] = useState(false);
  const [filters, setFilters] = useState({ name: "", minPrice: "", maxPrice: "" });

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getProducts();
        setProducts(data);
      } catch (error) {
        console.error("Error cargando productos:", error);
      }
    };

    fetchData();
  }, []);

  const handleDelete = async (id) => {
    await deleteProduct(id);
    setProducts(products.filter(product => product.id !== id));
  };

  const handleEdit = (product) => {
    setFormData(product);
    setIsEditing(true);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (isEditing) {
      await updateProduct(formData);
      setProducts(products.map(p => (p.id === formData.id ? formData : p)));
    } else {
      const newProduct = await createProduct(formData);
      setProducts([...products, newProduct]);
    }
    setFormData({ id: "", title: "", price: "" });
    setIsEditing(false);
  };

  const handleFilterChange = (e) => {
    setFilters({ ...filters, [e.target.name]: e.target.value });
  };

  const filteredProducts = products.filter((p) => {
    const nameMatch = p.title.toLowerCase().includes(filters.name.toLowerCase());
    const minPriceMatch = filters.minPrice === "" || p.price >= parseFloat(filters.minPrice);
    const maxPriceMatch = filters.maxPrice === "" || p.price <= parseFloat(filters.maxPrice);
    return nameMatch && minPriceMatch && maxPriceMatch;
  });

  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <h2>Gestión de Productos</h2>

        <div className="filter-container">
          <input
            type="text"
            name="name"
            placeholder="Filtrar por nombre"
            value={filters.name}
            onChange={handleFilterChange}
          />
          <input
            type="number"
            name="minPrice"
            placeholder="Precio mínimo"
            value={filters.minPrice}
            onChange={handleFilterChange}
          />
          <input
            type="number"
            name="maxPrice"
            placeholder="Precio máximo"
            value={filters.maxPrice}
            onChange={handleFilterChange}
          />
          <button
            className="btn-clear-filters"
            onClick={() => setFilters({ name: "", minPrice: "", maxPrice: "" })}
          >
            Limpiar Filtros
          </button>
        </div>

        <form onSubmit={handleSubmit}>
          <input
            type="text"
            placeholder="Nombre"
            value={formData.title}
            onChange={(e) => setFormData({ ...formData, title: e.target.value })}
            required
          />
          <input
            type="number"
            placeholder="Precio"
            value={formData.price}
            onChange={(e) => setFormData({ ...formData, price: e.target.value })}
            required
          />
          <button type="submit">{isEditing ? "Actualizar" : "Agregar"}</button>
        </form>

        <ProductTable products={filteredProducts} onEdit={handleEdit} onDelete={handleDelete} />
      </div>
    </div>
  );
};

export default Products;
y 